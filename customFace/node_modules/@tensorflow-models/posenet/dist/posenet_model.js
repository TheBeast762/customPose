"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var tfc = require("@tensorflow/tfjs-converter");
var tf = require("@tensorflow/tfjs-core");
var checkpoints_1 = require("./checkpoints");
var mobilenet_1 = require("./mobilenet");
var decode_multiple_poses_1 = require("./multi_pose/decode_multiple_poses");
var resnet_1 = require("./resnet");
var decode_single_pose_1 = require("./single_pose/decode_single_pose");
var util_1 = require("./util");
var MOBILENET_V1_CONFIG = {
    architecture: 'MobileNetV1',
    outputStride: 16,
    inputResolution: 513,
    multiplier: 0.75,
};
function validateModelConfig(config) {
    config = config || MOBILENET_V1_CONFIG;
    var VALID_ARCHITECTURE = ['MobileNetV1', 'ResNet50'];
    var VALID_STRIDE = { 'MobileNetV1': [8, 16, 32], 'ResNet50': [32, 16] };
    var VALID_RESOLUTION = [161, 193, 257, 289, 321, 353, 385, 417, 449, 481, 513, 801];
    var VALID_MULTIPLIER = {
        'MobileNetV1': [0.50, 0.75, 1.0],
        'ResNet50': [1.0]
    };
    var VALID_QUANT_BYTES = [1, 2, 4];
    if (config.architecture == null) {
        config.architecture = 'MobileNetV1';
    }
    if (VALID_ARCHITECTURE.indexOf(config.architecture) < 0) {
        throw new Error("Invalid architecture " + config.architecture + ". " +
            ("Should be one of " + VALID_ARCHITECTURE));
    }
    if (config.outputStride == null) {
        config.outputStride = 16;
    }
    if (VALID_STRIDE[config.architecture].indexOf(config.outputStride) < 0) {
        throw new Error("Invalid outputStride " + config.outputStride + ". " +
            ("Should be one of " + VALID_STRIDE[config.architecture] + " ") +
            ("for architecutre " + config.architecture + "."));
    }
    if (config.inputResolution == null) {
        config.inputResolution = 513;
    }
    if (VALID_RESOLUTION.indexOf(config.inputResolution) < 0) {
        throw new Error("Invalid inputResolution " + config.inputResolution + ". " +
            ("Should be one of " + VALID_RESOLUTION + " ") +
            ("for architecutre " + config.architecture + "."));
    }
    if (config.multiplier == null) {
        config.multiplier = 1.0;
    }
    if (VALID_MULTIPLIER[config.architecture].indexOf(config.multiplier) < 0) {
        throw new Error("Invalid multiplier " + config.multiplier + ". " +
            ("Should be one of " + VALID_MULTIPLIER[config.architecture] + " ") +
            ("for architecutre " + config.architecture + "."));
    }
    if (config.quantBytes == null) {
        config.quantBytes = 4;
    }
    if (VALID_QUANT_BYTES.indexOf(config.quantBytes) < 0) {
        throw new Error("Invalid quantBytes " + config.quantBytes + ". " +
            ("Should be one of " + VALID_QUANT_BYTES + " ") +
            ("for architecutre " + config.architecture + "."));
    }
    return config;
}
exports.SINGLE_PERSON_INFERENCE_CONFIG = {
    flipHorizontal: false,
    decodingMethod: 'single-person',
};
exports.MULTI_PERSON_INFERENCE_CONFIG = {
    flipHorizontal: false,
    decodingMethod: 'multi-person',
    maxDetections: 5,
    scoreThreshold: 0.5,
    nmsRadius: 20
};
function validateInferenceConfig(config) {
    config = config || exports.MULTI_PERSON_INFERENCE_CONFIG;
    var VALID_DECODING_METHOD = ['single-person', 'multi-person'];
    if (config.flipHorizontal == null) {
        config.flipHorizontal = false;
    }
    if (config.decodingMethod == null) {
        config.decodingMethod = 'multi-person';
    }
    if (VALID_DECODING_METHOD.indexOf(config.decodingMethod) < 0) {
        throw new Error("Invalid decoding method " + config.decodingMethod + ". " +
            ("Should be one of " + VALID_DECODING_METHOD));
    }
    if (config.decodingMethod === 'multi-person') {
        if (config.maxDetections == null) {
            config.maxDetections = 5;
        }
        if (config.maxDetections <= 0) {
            throw new Error("Invalid maxDetections " + config.maxDetections + ". " +
                ("Should be > 0 for decodingMethod " + config.decodingMethod + "."));
        }
        if (config.scoreThreshold == null) {
            config.scoreThreshold = 0.5;
        }
        if (config.scoreThreshold < 0.0 || config.scoreThreshold > 1.0) {
            throw new Error("Invalid scoreThreshold " + config.scoreThreshold + ". " +
                ("Should be in range [0.0, 1.0] for decodingMethod " + config.decodingMethod + "."));
        }
        if (config.nmsRadius == null) {
            config.nmsRadius = 20;
        }
        if (config.nmsRadius <= 0) {
            throw new Error("Invalid nmsRadius " + config.nmsRadius + ". " +
                ("Should be positive for decodingMethod " + config.decodingMethod + "."));
        }
    }
    return config;
}
var PoseNet = (function () {
    function PoseNet(net) {
        this.baseModel = net;
    }
    PoseNet.prototype.estimatePoses = function (input, config) {
        if (config === void 0) { config = exports.MULTI_PERSON_INFERENCE_CONFIG; }
        return __awaiter(this, void 0, void 0, function () {
            var outputStride, inputResolution, _a, height, width, _b, resizedHeight, resizedWidth, _c, padTop, padBottom, padLeft, padRight, heatmapScores, offsets, displacementFwd, displacementBwd, outputs, _d, scoresBuffer, offsetsBuffer, displacementsFwdBuffer, displacementsBwdBuffer, poses, pose, scaleY, scaleX, scaledPoses;
            var _this = this;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        config = validateInferenceConfig(config);
                        outputStride = this.baseModel.outputStride;
                        inputResolution = this.baseModel.inputResolution;
                        mobilenet_1.assertValidOutputStride(outputStride);
                        mobilenet_1.assertValidResolution(this.baseModel.inputResolution, outputStride);
                        _a = util_1.getInputTensorDimensions(input), height = _a[0], width = _a[1];
                        _b = [0, 0], resizedHeight = _b[0], resizedWidth = _b[1];
                        _c = [0, 0, 0, 0], padTop = _c[0], padBottom = _c[1], padLeft = _c[2], padRight = _c[3];
                        resizedHeight = inputResolution;
                        resizedWidth = inputResolution;
                        outputs = tf.tidy(function () {
                            var _a = util_1.padAndResizeTo(input, [resizedHeight, resizedWidth]), resized = _a.resized, paddedBy = _a.paddedBy;
                            padTop = paddedBy[0][0];
                            padBottom = paddedBy[0][1];
                            padLeft = paddedBy[1][0];
                            padRight = paddedBy[1][1];
                            return _this.baseModel.predict(resized);
                        });
                        heatmapScores = outputs.heatmapScores;
                        offsets = outputs.offsets;
                        displacementFwd = outputs.displacementFwd;
                        displacementBwd = outputs.displacementBwd;
                        return [4, util_1.toTensorBuffers3D([heatmapScores, offsets, displacementFwd, displacementBwd])];
                    case 1:
                        _d = _e.sent(), scoresBuffer = _d[0], offsetsBuffer = _d[1], displacementsFwdBuffer = _d[2], displacementsBwdBuffer = _d[3];
                        if (!(config.decodingMethod === 'multi-person')) return [3, 3];
                        return [4, decode_multiple_poses_1.decodeMultiplePoses(scoresBuffer, offsetsBuffer, displacementsFwdBuffer, displacementsBwdBuffer, outputStride, config.maxDetections, config.scoreThreshold, config.nmsRadius)];
                    case 2:
                        poses = _e.sent();
                        return [3, 5];
                    case 3: return [4, decode_single_pose_1.decodeSinglePose(heatmapScores, offsets, outputStride)];
                    case 4:
                        pose = _e.sent();
                        poses = [pose];
                        _e.label = 5;
                    case 5:
                        scaleY = (height + padTop + padBottom) / (resizedHeight);
                        scaleX = (width + padLeft + padRight) / (resizedWidth);
                        scaledPoses = util_1.scalePoses(poses, scaleY, scaleX, -padTop, -padLeft);
                        if (config.flipHorizontal) {
                            scaledPoses = util_1.flipPosesHorizontal(scaledPoses, width);
                        }
                        heatmapScores.dispose();
                        offsets.dispose();
                        displacementFwd.dispose();
                        displacementBwd.dispose();
                        return [2, scaledPoses];
                }
            });
        });
    };
    PoseNet.prototype.dispose = function () {
        this.baseModel.dispose();
    };
    return PoseNet;
}());
exports.PoseNet = PoseNet;
function loadMobileNet(config) {
    return __awaiter(this, void 0, void 0, function () {
        var inputResolution, outputStride, quantBytes, multiplier, url, graphModel, mobilenet;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    inputResolution = config.inputResolution;
                    outputStride = config.outputStride;
                    quantBytes = config.quantBytes;
                    multiplier = config.multiplier;
                    if (tf == null) {
                        throw new Error("Cannot find TensorFlow.js. If you are using a <script> tag, please " +
                            "also include @tensorflow/tfjs on the page before using this\n        model.");
                    }
                    url = checkpoints_1.mobileNetCheckpoint(inputResolution, outputStride, multiplier, quantBytes);
                    return [4, tfc.loadGraphModel(config.modelUrl || url)];
                case 1:
                    graphModel = _a.sent();
                    mobilenet = new mobilenet_1.MobileNet(graphModel, inputResolution, outputStride);
                    return [2, new PoseNet(mobilenet)];
            }
        });
    });
}
function loadResNet(config) {
    return __awaiter(this, void 0, void 0, function () {
        var inputResolution, outputStride, quantBytes, url, graphModel, resnet;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    inputResolution = config.inputResolution;
                    outputStride = config.outputStride;
                    quantBytes = config.quantBytes;
                    if (tf == null) {
                        throw new Error("Cannot find TensorFlow.js. If you are using a <script> tag, please " +
                            "also include @tensorflow/tfjs on the page before using this\n        model.");
                    }
                    url = checkpoints_1.resNet50Checkpoint(outputStride, quantBytes);
                    return [4, tfc.loadGraphModel(config.modelUrl || url)];
                case 1:
                    graphModel = _a.sent();
                    resnet = new resnet_1.ResNet(graphModel, inputResolution, outputStride);
                    return [2, new PoseNet(resnet)];
            }
        });
    });
}
function load(config) {
    if (config === void 0) { config = MOBILENET_V1_CONFIG; }
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            config = validateModelConfig(config);
            if (config.architecture === 'ResNet50') {
                return [2, loadResNet(config)];
            }
            else if (config.architecture === 'MobileNetV1') {
                return [2, loadMobileNet(config)];
            }
            else {
                return [2, null];
            }
            return [2];
        });
    });
}
exports.load = load;
//# sourceMappingURL=posenet_model.js.map